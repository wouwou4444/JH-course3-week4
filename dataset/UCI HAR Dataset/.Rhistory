class(d1)
unclass(d1)
d1
as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2*min
t2$min
weekdays(d1)
weekdays(t1)
months(t1)
quaters(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
pollutantmean <- function (directory, pollutant, id = 1:332) {
read.csv( file = paste(directory, id))
}
pollutantmean("d:/machine-learning/Johns_Hopkins/course2/specdata/")
pollutantmean("d:/machine-learning/Johns_Hopkins/course2/specdata/",id = 1)
id <- 1
id
as.character(id)
print(id)
?as.character
print(id, digits = 3)
format(id, digits = 3)
format(id, digits = 4)
as.character(id, digits = 4)
character(id, )
character(id )
character( )
character( "a")
character( 2)
as.numeric(id)
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
formatC(x, width = 8, format = "d", flag = "0")
x
formatC(id, width = 8, format = "d", flag = "0")
format(id, width = 8, format = "d", flag = "0")
format(id, width = 8, format = "i", flag = "0")
format(id, width = 8, flag = "0")
exit()
exit
0
quit
quit()
class(iris)
iris
str(iris)
summary(iris)
class(summary(iris))
mtcars
head(mtcars)
str(mtcars)
mtcars$carname <- rownames(mtcars)
str(mtcars)
melt(mtcars, id= c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
library(reshape2)
install.packages("reshape2")
library(reshape2)
melt(mtcars, id= c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
melt(mtcars, id= c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
carMelt <- melt(mtcars, id= c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable, sum)
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
class(iris)
head(iris)
str(iris)
dtiris <- data.table::data.table(iris)
library(data.table)
class(dtiris)
dtiris[,table(Sepal.Length)]
rep(1:9, len = 54)
warpbreaks
str(warpbreaks)
warpbreaks
str(warpbreaks)
warpbreaks$replicate <- rep(1:9, len = 54)
str(warpbreaks)
xtabs(breaks~.)
xtabs(breaks~., data = warpbreaks)
xtabs(breaks~tension + wool, data = warpbreaks)
xtabs(breaks~tension, data = warpbreaks)
seq(1,20, by = 3);s1
s1 <- seq(1,20, by = 3);s1
s2 <- seq(1,20, length = 3);s2
s2 <- seq(1,20, length = 5);s2
urlFile <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
destfile <- "./restaurants.csv"
download.file(urlFile, destfile = destfile)
getwd()
setwd(dir = "d:/machine-learning/Johns_Hopkins/course3")
download.file(urlFile, destfile = destfile)
getwd()
list.files()
restData <- read.csv(destfile)
str(restData)
restData$neighborhood %in% c("Roland Park")
restData$nearMe <- restData$neighborhood %in% c("Roland Park")
table(restData$nearMe)
restData$nearMe <- restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
ifelse(restData$zipCode < 0 )
ifelse(restData$zipCode < 0 , TRUE)
ifelse(restData$zipCode < 0 , TRUE, FALSE)
restData$zipWrong <- ifelse(restData$zipCode < 0 , TRUE, FALSE)
table(restData$zipWrong)
restData$zipWrong <- ifelse(restData$zipCode < 0 , "oui", "non")
table(restData$zipWrong)
restData$zipGroups = cut(restData$zipCode, breaks=quantile(restData$zipCode))
restData$zipGroups
cut(restData$neighborhood, breaks=quantile(restData$zipCode))
cut(restData$councilDistrict, breaks=quantile(restData$zipCode))
restData$zipGroups2 <- cut(restData$councilDistrict, breaks=quantile(restData$zipCode))
View(restData)
table(restData$zipGroups2)
restData$zipGroups2 <- cut(restData$councilDistrict, breaks=quantile(restData$councilDistrict))
restData$zipGroups2
View(restData)
table(restData$zipGroups2)
table(restData$zipGroups2, useNA = "ifany")
table(restData$zipGroups2, useNA = "ifany")
restData[, table("councilDistrict","zipGroups2")]
restData[, table(councilDistrict,zipGroups2)]
dtrestData <- data.table(restData)
dtrestData[, table(councilDistrict,zipGroups2)]
dtrestData[, table(councilDistrict,zipGroups2, useNA = "ifany")]
dtrestData[, table(zipCode,zipGroups, useNA = "ifany")]
head(InsectSprays)
tail(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spTins <- split(InsectSprays$count, InsectSprays$spray)
spIns <- split(InsectSprays$count, InsectSprays$spray)
spIns
apply(spIns, sum)
lapply(spIns, sum)
sapply(spIns, sum)
unlist(lapply(spIns, sum))
library(plyr)
ddply(InsectSprays, .(spray), summarize, sum= sum(count))
?ave
ddply(InsectSprays, .(spray), summarize, sum= ave(count))
174/12
200/11
200/12
ddply(InsectSprays, .(spray), summarize, sum= ave(count, max))
ddply(InsectSprays, .(spray), summarize, sum= ave(count))
ddply(InsectSprays, .(spray), summarize, sum= ave(count, max))
ddply(InsectSprays, .(spray), summarize, test= ave(count, max))
ddply(InsectSprays, .(spray), summarize, test= ave(count, mean))
ddply(InsectSprays, .(spray), summarize, test= ave(count))
ddply(InsectSprays, .(spray), summarize, test= ave(count, mean))
ddply(InsectSprays, .(spray), summarize, test= ave(count, sum))
ddply(InsectSprays, .(spray), summarize, test= ave(count, FUN =sum))
ddply(InsectSprays, .(spray), summarize, sum= ave(count, FUN= max))
ddply(InsectSprays, .(spray), summarize, sum= ave(count, FUN= mean))
ddply(InsectSprays, .(spray), summarize, sum= ave(count, FUN= min))
ddply(InsectSprays, .(spray), summarize, test= ave(count, mean))
ddply(InsectSprays, .(spray), summarize, test= ave(count, FUN = mean))
setwd("d:/machine-learning/Johns_Hopkins/course3/week3/")
#### Quizz 3
urlFile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destfile <-  "idaho2016.csv"
download.file(urlFile, destfile = destfile)
iadho2016 <- read.csv(destfile)
str(iadho2016)
str(iadho2016$AGS)
table(iadho2016$AGS)
class(iadho2016)
library(plyr)
select(iadho2016, AGS == 6)
library(dplyr)
install.packages("dplyr")
library(dplyr)
select(iadho2016, AGS == 6)
?select
select(iadho2016, 2:4)
colnames(iadho2016)
select(iadho2016, wgtp2:wgtp9)
filter(iadho2016, AGS == 6)
filter(iadho2016, AGS == 6 & ACR == 33)
filter(iadho2016, AGS == 6 & ACR == 3)
iadho2016 %>% filter( AGS == 6 & ACR == 3)
iadho2016[iadho2016$ACR == 3 & iadho2016$AGS == 6, ]
iadho2016[which(iadho2016$ACR == 3 & iadho2016$AGS == 6), ]
which(iadho2016$ACR == 3 & iadho2016$AGS == 6)
#####
install.packages("jpeg")
library(jpeg)
source <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
img <- jpeg::readJPEG(source = source, native = TRUE)
destfile <- jeff.jpg
destfile <- "jeff.jpg"
source <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
destfile <- "jeff.jpg"
download.file(source, destfile = destfile)
img <- jpeg::readJPEG(source = destfile , native = TRUE)
download.file(source, destfile = destfile, b)
download.file(source, destfile = destfile, "b")
download.file(source, destfile = destfile, mode = "wb")
img <- jpeg::readJPEG(source = destfile , native = TRUE)
str(img)
quantile(img)
quantile(img, 30, 80)
quantile(img, .30, .80)
quantile(img, .80)
####
urlFile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
destfile <-  "GDP.csv"
setwd("d:/machine-learning/Johns_Hopkins/course3/week3/")
download.file(urlFile, destfile = destfile)
GDP <- read.csv(destfile)
str(GDP)
head(GDP)
urlFile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
destfile <-  "country.csv"
download.file(urlFile, destfile = destfile)
country <- read.csv(destfile)
str(country)
merge(GDP, country, by.x = "X", by.y = "CountryCode")
df <- merge(GDP, country, by.x = "X", by.y = "CountryCode")
colnames(df) %in% "rank"
colnames(df)
nrow(df)
head(colnames(df))
head(colnames(df),15)
head(colnames(df),15)2
head(colnames(df),15)2
head(colnames(df),20)
class(df$Gross.domestic.product.2012)
order(as.numeric(df$Gross.domestic.product.2012))
nrow(GDP)
nrow(country)
head(df[order(as.numeric(df$Gross.domestic.product.2012)), df$Gross.domestic.product.2012])
head(df[order(as.numeric(df$Gross.domestic.product.2012)), "Gross.domestic.product.2012"])
head(df[order(as.numeric(df$Gross.domestic.product.2012)), "Gross.domestic.product.2012"],30)
class(df[order(as.numeric(df$Gross.domestic.product.2012)), "Gross.domestic.product.2012"])
(df[order(as.numeric(df$Gross.domestic.product.2012)), "Gross.domestic.product.2012"])
VIew(GDP)
Viw(GDP)
View(GDP)
sort(str(GDP))
sort(table(GDP))
sort(table(GDP$X))
GDP <- GDP[ !(GDP$X == ""),]
nrow(GDP)
View(GDP)
df <- merge(GDP, country, by.x = "X", by.y = "CountryCode")
nrow(df)
View(df)
GDP <- GDP[ !(GDP$Gross.domestic.product.2012 == ""),]
nrow(GDP)
df <- merge(GDP, country, by.x = "X", by.y = "CountryCode")
nrow(df)
(df[order(as.numeric(df$Gross.domestic.product.2012)), "Gross.domestic.product.2012"])
(df[order(as.numeric(df$Gross.domestic.product.2012)), "X"])
(df[order(as.numeric(df$Gross.domestic.product.2012),decreasing = TRUE), "X"])
(df[order(as.numeric(df$Gross.domestic.product.2012),decreasing = TRUE), c("X","X.2")])
head(df[order(as.numeric(df$Gross.domestic.product.2012),decreasing = TRUE), c("X","X.2")]),13)
head(df[order(as.numeric(df$Gross.domestic.product.2012),decreasing = TRUE), c("X","X.2")],13)
head(df[order(as.numeric(df$Gross.domestic.product.2012),decreasing = TRUE), c("X","X.2")],14)
View(df[order(as.numeric(df$Gross.domestic.product.2012),decreasing = TRUE), c("X","X.2")])
View(df[order(as.numeric(df$Gross.domestic.product.2012),decreasing = TRUE), c("X","X.2","Gross.domestic.product.2012")])
View(df[order(as.integer(df$Gross.domestic.product.2012),decreasing = TRUE), c("X","X.2","Gross.domestic.product.2012")])
View(df[sort(as.integer(df$Gross.domestic.product.2012),decreasing = TRUE), c("X","X.2","Gross.domestic.product.2012")])
View(df[order(as.numeric(df$Gross.domestic.product.2012),decreasing = TRUE), c("X","X.2","Gross.domestic.product.2012")])
class(df$Gross.domestic.product.2012)
class(levels(df$Gross.domestic.product.2012))
class(integer(df$Gross.domestic.product.2012))
class(as.integer(df$Gross.domestic.product.2012))
(as.integer(df$Gross.domestic.product.2012))
order(as.integer(df$Gross.domestic.product.2012))
order(as.integer(levels(df$Gross.domestic.product.2012)))
order(as.integer(levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012])
View(df[order(as.integer(levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012],decreasing = TRUE), c("X","X.2","Gross.domestic.product.2012")])
split(df, df$Income.Group)
str(split(df, df$Income.Group))
head(str(split(df, df$Income.Group)))
head(str(split(df, df$Income.Group)),2)
head(str(split(df$Gross.domestic.product.2012, df$Income.Group)),2)
head(str(split(df$Gross.domestic.product.2012, df$Income.Group)),2)
dfSplit <- (split(df$Gross.domestic.product.2012, df$Income.Group))
dfSplit
(levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012]
dfSplit <- (split((levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012], df$Income.Group))
dfSplit
lapply(dfSplit, mean)
lapply(dfSplit, sum)
lapply(dfSplit, FUN = sum)
lapply(dfSplit, FUN = function (x) { sum(as.numeric(x))})
lapply(dfSplit, FUN = function (x) { mean(as.numeric(x))})
(levels(df$Gross.domestic.product.2012))
(levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012]
class((levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012])
class((levels(df$Gross.domestic.product.2012)))
((levels(df$Gross.domestic.product.2012)))
((levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012])
((levels(df$Gross.domestic.product.2012))[1])
((levels(df$Gross.domestic.product.2012))[2])
((levels(df$Gross.domestic.product.2012))[3])
((levels(df$Gross.domestic.product.2012))[4])
head((levels(df$Gross.domestic.product.2012)))
head((levels(df$Gross.domestic.product.2012)),12)
head((levels(df$Gross.domestic.product.2012)),24)
df$Gross.domestic.product.2012
str(df)
levels(df$Short.Name)
class(levels(df$Short.Name)=
class(levels(df$Short.Name))
levels(df$Short.Name)[df$X]
levels(df$Short.Name)[df$Gross.domestic.product.2012]
levels(df$Short.Name)[df$Short.Name]
levels(df$Short.Name)[df$Gross.domestic.product.2012]
levels(df$Short.Name)[df$Short.Name]
levels(df$Short.Name)[df$Gross.domestic.product.2012]
[df$Gross.domestic.product.2012]
df$Gross.domestic.product.2012
df$Gross.domestic.product.2012
levels(1:5)
levels(factor(1:5))
(factor(1:5))
(factor(rep(1:5,4)))
levels(factor(rep(1:5,4)))
df$top38 <- ifelse(as.numeric((levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012]) > 39, TRUE, FALSE )
table(df$Income.Group, df$top38)
df$top38 <- ifelse(as.numeric((levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012]) > 39, FALSE, TRUE )
table(df$Income.Group, df$top38)
df$top38 <- ifelse(as.numeric((levels(df$Gross.domestic.product.2012))[df$Gross.domestic.product.2012]) > 38, FALSE, TRUE )
table(df$Income.Group, df$top38)
urlFile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destfile <-  "GDP.csv"
setwd("d:/machine-learning/Johns_Hopkins/course3/week4/")
download.file(urlFile, destfile = destfile)
idh2016 <- read.csv((destfile))
View(idh2016)
str(idh2016)
dim(idh2016)
names(idh2016)
names(idh2016)[123]
strsplit(names(idh2016)[123])
strsplit(names(idh2016)[123], "wgtp")
#####
urlFile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
#####
urlFile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
destfile <-  "GDP.csv"
setwd("d:/machine-learning/Johns_Hopkins/course3/week4/")
download.file(urlFile, destfile = destfile)
GDP <- read.csv((destfile))
View(GDP)
head(GDP$X.3=
head(GDP$X.3)
GDP <- read.csv((destfile), skip = 4)
View(GDP)
head(GDP$X.4)
lapply(GDP$X.4, function (x) {gsub(",","",x)})
GDP$GDP <- lapply(GDP$X.4, function (x) {gsub(",","",x)})
levels(GDP$GDP)
factor(GDP$GDP)
(GDP$GDP)
GDP$GDP <- sapply(GDP$X.4, function (x) {gsub(",","",x)})
(GDP$GDP)
factor(GDP$GDP)
levels(factor(GDP$GDP))[GDP$GDP]
(levels(factor(GDP$GDP)))[GDP$GDP]
(levels(factor(GDP$GDP)))
(levels((GDP$GDP)))[GDP$GDP]
(levels((GDP$GDP)))
(((GDP$GDP)))
((factor(GDP$GDP)))
((as.numeric(GDP$GDP)))
mean((as.numeric(GDP$GDP)), na.rm = TRUE)
GDP$X.4
GDP <- GDP[1:190,]
mean((as.numeric(GDP$GDP)), na.rm = TRUE)
grep("^United",GDP$X.3)
grep("^United",GDP$X.3,value = TRUE)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
class(sampleTimes)
month(sampleTimes[1])
year(sampleTimes[1])
year(sampleTimes)
table(year(sampleTimes) == "2012")
table(year(sampleTimes) == "2012" )
day(sampleTimes)
wd(sampleTimes)
weekdays(sampleTimes)
table(year(sampleTimes) == "2012" & weekdays(sampleTimes == "Monday"))
table(year(sampleTimes) == "2012" & weekdays(sampleTimes) == "Monday")
urlFile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
destfile <-  "country.csv"
download.file(urlFile, destfile = destfile)
country <- read.csv(destfile)
str(country)
df <- merge(GDP, country, by.x = "X", by.y = "CountryCode")
View(country)
View(country)
df$Special.Notes
grep("june", tolower(df$Special.Notes))
length(grep("june", tolower(df$Special.Notes)))
(grep("june", tolower(df$Special.Notes),value = TRUE))
(grep("fiscal.+june", tolower(df$Special.Notes),value = TRUE))
length((grep("fiscal.+june", tolower(df$Special.Notes),value = TRUE)))
urlFile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
destfile <- "./dataset.zip"
setwd("d:/machine-learning/Johns_Hopkins/course3/week4/")
download.file(urlFile, destfile = destfile)
setwd("d:/machine-learning/Johns_Hopkins/course3/week4/dataset/UCI HAR Dataset/")
list.files()
list.files("./train/Inertial Signals")
list.files("./train/Inertial Signals/")
list.files("./test")
list.files("./test/Inertial Signals/")
list.files("./train/")
list.files("./test/")
trainingSet <- read.csv("./train/X_train.txt")
testSet <- read.csv("./test/X_test.txt")
head(trainingSet)
str(trainingSet)
dim(trainingSet)
trainingSet <- read.csv("./train/X_train.txt", sep = " ")
dim(trainingSet)
str(trainingSet)
dim(trainingSet)
View(trainingSet)
summary(trainingSet)
tail(summary(trainingSet))
tail(summary(trainingSet),10)
(summary(trainingSet[,1:2]))
(summary(trainingSet[,562:662]))
trainingSet <- read.table("./train/X_train.txt")
trainingSet <- read.table("./train/X_train.txt")
head(trainingSet)
str(trainingSet)
dim(trainingSet)
testSet <- read.table("./test/X_test.txt")
dim(testSet)
featuresNames <- read.table("./features.txt")
dim(featuresNames)
head(featuresNames)
tail(featuresNames)
grep("mean",tolower(tail(featuresNames)),value = TRUE)
grep("mean",tolower(tail(featuresNames)$V2),value = TRUE)
grep("mean",tolower((featuresNames)$V2),value = TRUE)
grep("dev",tolower((featuresNames)$V2),value = TRUE)
grep("sd",tolower((featuresNames)$V2),value = TRUE)
grep("sta",tolower((featuresNames)$V2),value = TRUE)
grep("mean",tolower((featuresNames)$V2),value = TRUE)
list.files()
activityNames <- read.table("activity_labels.txt")
activityNames
factor(levels = 1:6, labels = activityNames$V2)
# looking for mean and std
grep("mean",tolower((featuresNames)$V2),value = TRUE)
grep("std",tolower((featuresNames)$V2),value = TRUE)
grep("mean\\(",tolower((featuresNames)$V2),value = TRUE)
grep("std\\(",tolower((featuresNames)$V2),value = TRUE)
# looking for mean and std
grep("mean\\(",tolower((featuresNames)$V2),value = TRUE)
yTestSet <- read.table("./test/y_test.txt")
yTrainSet <- read.table("./train/y_train.txt")
yTrainSet
as.factor(yTrainSet)
as.factor(yTrainSet$V1)
?as.factor
class(yTrainSet$V1)
class(as.factor(yTrainSet$V1))
?levels
names(yTrainSet) <- "label"
names(yTrainSet) <- "activity"
as.factor(yTrainSet$activity)
yTrainSet$activity <- as.factor(yTrainSet$activity)
levels(yTrainSet$activity)
levels(yTrainSet$activity) <- activityNames$V2
levels(yTrainSet$activity)
yTrainSet$activity
